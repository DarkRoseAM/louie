/* 
 * Copyright 2015 Rhythm & Hues Studios.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.rhythm.louie.jdbc;

import java.io.Closeable;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;

/**
 *
 * @author cjohnson
 */
public interface JdbcService extends Closeable {

    /**
     * Returns the underlying database connection for this service
     * 
     * @return a database Connection
     */
    Connection getConnection();

    /**
     * Set the SQL query for the service
     * 
     * @return 
     */
    String getSqlString();

    /**
     * Return the SQL query for the service
     * 
     * @param sql
     */
    void setSqlString(String sql);

    /**
     * Returns the Prepared Statement created by the service
     * 
     * @return
     * @throws SQLException 
     */
    PreparedStatement getPreparedStatement() throws SQLException;

    /**
     * Executes the SQL statement in this <code>PreparedStatement</code> object,
     * which may be any kind of SQL statement.
     * <P>
     * The <code>execute</code> method returns a <code>boolean</code> to
     * indicate the form of the first result.  You must call either the method
     * <code>getResultSet</code> or <code>getUpdateCount</code>
     * to retrieve the result.
     * 
     * @return <code>true</code> if the first result is a <code>ResultSet</code>
     *         object; <code>false</code> if the first result is an update
     *         count or there is no result
     * 
     * @throws SQLException 
     * 
     * @see java.sql.PreparedStatement#execute 
     */
    boolean execute() throws SQLException;

    /**
     * Executes the SQL statement which must be an <code>INSERT</code>, 
     * <code>UPDATE</code> or <code>DELETE</code>; or an SQL statement that returns nothing.
     *
     * @return either (1) the row count of affected rows
     *         or (2) 0 for SQL statements that return nothing
     * 
     * @throws SQLException 
     * 
     * @see java.sql.PreparedStatement#executeUpdate
     */
    int executeUpdate() throws SQLException;
    
    /**
     * Executes the SQL query and returns the <code>ResultSet</code> 
     * object generated by the query.
     *
     * @return a <code>ResultSet</code> object that contains the data produced by the
     *         query; never <code>null</code>
     * @throws SQLException 
     * 
     * @see java.sql.PreparedStatement#executeQuery
     */
    ResultSet executeQuery() throws SQLException;

    /**
     * Returns the id generated by an insert
     * 
     * @return an integer id
     * @throws SQLException 
     */
    int getSerial() throws SQLException;
    
    /**
     *  Retrieves the current result as a <code>ResultSet</code> object.
     *  This method should be called only once per result.
     *
     * @return the current result as a <code>ResultSet</code> object or
     * <code>null</code> if the result is an update count or there are no more results
     * @exception SQLException if a database access error occurs or
     * this method is called on a closed <code>Statement</code>
     * @see #execute
     * @see java.sql.Statement#getResultSet
     */
    ResultSet getResultSet() throws SQLException;
    
     /**
     *  Retrieves the current result as an update count;
     *  if the result is a <code>ResultSet</code> object or there are no more results, -1
     *  is returned. This method should be called only once per result.
     *
     * @return the current result as an update count; -1 if the current result is a
     * <code>ResultSet</code> object or there are no more results
     * @exception SQLException if a database access error occurs or
     * this method is called on a closed <code>Statement</code>
     * @see #execute
     * @see java.sql.Statement#getResultSet
     */
    int getUpdateCount() throws SQLException;

}
