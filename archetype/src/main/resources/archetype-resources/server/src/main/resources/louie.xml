<?xml version="1.0" encoding="UTF-8"?>
<louie>
    <!-- 
    The set of expected keys is visible in the LouieProperties class
    
    
    "servers" is an expected element name, denoting a block of known louie deployments 
    <servers> 
    
        "server" is an expected element name, and "name" is an expected attribute. 
        "name" will represent an easily accessible key for this host w/in the louie environment
        <server name = "DEV"> 
        
            "host" is the address or resolvable host name 
            <host>localhost</host>  
            
            "location" represents a more constant way for a service to find a remote server (since the serving hardware may change)
            <location>MAIN</location> 
              
            "display" is informational only
            <display>Los Angeles</display> 
              
            "timezone" is a Java TimeZone compatible time zone ID. see: TimeZone.getAvailableIDs();
            <timezone>America/Los_Angeles</timezone> 
                 
            "gateway" represents an alternate gateway/context-root (Default is 'louie')
            <gateway>louie</gateway> 
                 
            "port" is the designated port for HTTP connections (Default is 8080)
            <port>8080</port> 
            
            "ip" can be specified if the hostname is not resolvable via DNS
            <ip>10.100.100.10</ip>
            
            "gibberish_prop" represents a custom property for a particular server. It is locatable via .getCustomProperty() on the Server object
            <gibberish_prop>nonsense</gibberish_prop>
        </server>
    </servers>                                                                                                                                             


    "services" is an expected element, denoting a block of configured services for this deployment
    <services> 
    
        "defaults" is an expected element name, representing default configurations for any services
        which may not be explicitly configured here. (Service configurations are generated for any
        found services without explicit configurations by inheriting these defaults)
        <defaults> 
        
            "enable" as the default, this specifies whether this deployment behaves as opt-in or opt-out for starting up services
            <enable>true</enable> 
            
            "remote_host" represents a remote host for remote layers (services which reroute all calls to a specific host)
            <remote_host>LA</central_host> 
            
            "readonly" disables Service methods which were annotated w/ @Updating
            <readonly>false</readonly>
            
            "caching" can enable/disable a caching layer (Currently it is up to the developer to check this w/in their Service implementation)
            <caching>true</caching> 
            
        </defaults>
        
        "service" is an expected element representing a specific service configuration
        "name" is the service name, which must the implementation service name
        "enable" is an optional attribute which overrides whatever was specified in the default "enable"
        <service name="priority" enable="false"/> 
        
        "service" can also be flushed out with nested configurations
        <service name="hardware" >
            
            Service Layers can be configured to cusomize the service stack
            Ommitting layers will default to loading annotation based layers
            <layers>
                <cache />
                <layer class="com.something.hardware.DifferentDAO" />
            </layers>
            
            Any configuration specified here will override anything found in the defaults
            <readonly>true</readonly>
            
            "gibberish_prop" represents a custom property for a particular service. It is locatable via .getCustomProperty() on the ServiceProperties object
            <gibberish_prop>nonsense</gibberish_prop>
            
        </service>
    </services>
    
    
    "messaging" and "jmsadapter" are used to configure a JMS implementation
    <messaging>  
        <jmsadapter>com.rhythm.louie.activemq.ActiveMQAdapter</jmsadapter> 
    </messaging>
    
    
    Anything else specified as a child of the "louie" element will be made into a CustomProperty object and can
    be fetched from the LouieProperties class. ie: LouieProperties.getCustomProperty("custom_prop1");
    <custom_prop1>
        <some_key>value</some_key>
        <some_other_key>other_value</some_other_key>
    </custom_prop1>
    
    -->
</louie>