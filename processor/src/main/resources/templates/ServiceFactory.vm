/*** GENERATED FROM ${info.inputFile} - DO NOT EDIT  ***/

/*
 * ${className}.java
 */
package ${info.packageName};

import com.rhythm.louie.ServiceProvider;
import com.rhythm.louie.server.ServiceProperties;
import com.rhythm.louie.service.ServiceFactory;
import com.rhythm.louie.service.ServiceUtils;

@ServiceProvider
public class ${className} implements ServiceFactory {

    private static final String serviceName = "${info.serviceName}";

    public ${className}() {}

    @Deprecated
    public static ${className} getInstance() {
        return new ${className}();
    }

    @Override
    public String getServiceName() {
        return serviceName;
    }

    public static ${info.serviceClassName} getServiceClient() throws Exception {
        return loadService().getDelegate();
    }

    private static ${baseName}ServiceHandler service;

    @Override
    public ${baseName}ServiceHandler getService() throws Exception {
        return loadService();
    }

    @SuppressWarnings("unchecked")
    private static synchronized ${baseName}ServiceHandler loadService() throws Exception {
        if (service!=null) {
            return service;
        }

        ServiceProperties props = ServiceProperties.getServiceProperties(serviceName);
        
        ${info.serviceClassName} serviceImpl = ServiceUtils.loadService(props.getServiceLayers(),${info.serviceClassName}.class);
        
        service = new ${baseName}ServiceHandler();
        service.setDelegate(serviceImpl);
        return service;
    }

}