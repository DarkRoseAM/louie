/*** GENERATED FROM ${info.inputFile} - DO NOT EDIT  ***/

/*
 * ${className}.java
 *
 * Copyright (c) 2013 Rhythm & Hues Studios. All rights reserved.
 */
package ${info.packageName};

import com.rhythm.louie.connection.LouieConnection;
import com.rhythm.louie.connection.Request;
import com.rhythm.louie.stream.ListConsumer;
import com.rhythm.louie.stream.SingleConsumer;
import com.rhythm.louie.stream.Consumer;
import com.rhythm.louie.stream.Consumers;
import com.rhythm.pb.PBParam;
import com.rhythm.pb.PBType;

public class ${className} implements ${baseName}Client {

    private final String SYSTEM = "${info.serviceName}";
    private final com.rhythm.louie.connection.LouieClient client;

    public ${className}(LouieConnection connection) {
        client = new com.rhythm.louie.connection.LouieClient(connection);
    }
#foreach($method in $info.methodInfos)

#if ( $method.isDeprecated() )
    @Deprecated
#end
    @Override
    public ${method.convertedReturnType} ${method.name}(${method.convertedParamString}) throws ${method.throwsClause} {
#if( $method.returnsList() )        
        ListConsumer<${method.baseReturnType}> consumer = Consumers.newListConsumer();
#else 
        SingleConsumer<${method.baseReturnType}> consumer = Consumers.newSingleConsumer();
#end
#if ( $method.hasParams() )
        PBParam param = PBParam.createParam(${method.builderParamString});
        Request<${method.baseReturnType}> packagedRequest = 
            Request.newParams(consumer, SYSTEM, "${method.name}", param, 
#else
        Request<${method.baseReturnType}> packagedRequest = 
            Request.newParams(consumer, SYSTEM, "${method.name}", 
#end
            ${method.baseReturnType}.getDefaultInstance());
        client.doRequest(packagedRequest);
        return ${method.getReturnConvertCode("consumer.get()")};
    }

#if ( $method.isDeprecated() )
    @Deprecated
#end
    public void ${method.name}(${method.convertedParamString}#if ( $method.hasParams() ),#end Consumer<${method.baseReturnType}> consumer) throws ${method.throwsClause} {
#if ( $method.hasParams() )
        PBParam param = PBParam.createParam(${method.builderParamString});
        Request<${method.baseReturnType}> packagedRequest = 
            Request.newParams(consumer, SYSTEM, "${method.name}", param, 
#else
        Request<${method.baseReturnType}> packagedRequest = 
            Request.newParams(consumer, SYSTEM, "${method.name}", 
#end
            ${method.baseReturnType}.getDefaultInstance());
        client.doRequest(packagedRequest);
    }
#end
}