/*** GENERATED FROM ${info.inputFile} - DO NOT EDIT  ***/

/*
 * ${className}.java
 */
package ${info.packageName};

import com.rhythm.louie.connection.LouieConnection;
import com.rhythm.louie.connection.Request;
import com.rhythm.louie.connection.Response;
import com.rhythm.louie.stream.ListConsumer;
import com.rhythm.louie.stream.SingleConsumer;
import com.rhythm.louie.stream.Consumer;
import com.rhythm.louie.stream.Consumers;

import com.rhythm.louie.pb.PBParam;
import com.rhythm.louie.pb.PBType;

public class ${className} implements ${baseName}Client {

    private final String SYSTEM = "${info.serviceName}";
    private final LouieConnection connection;

    public ${className}(LouieConnection connection) {
        this.connection = connection;
    }
#foreach($method in $info.methodInfos)
#if ($method.isClientAccess()) 
#if( $method.returnsPbList() )        
#set( $returnType = ${method.basePbReturnType})
#else 
#set( $returnType = ${method.pbReturnType})
#end

    /**
#foreach( $line in $method.javadoc.split("\n"))
     * $line
#end
     */
#if ( $method.isDeprecated() )
    @Deprecated
#end
    @Override
    public ${method.clientReturnType} ${method.name}(${method.paramString})${method.throwsClause} {
#if( $method.returnsPbList() )        
        ListConsumer<$returnType> consumer = Consumers.newListConsumer();
#else 
        SingleConsumer<$returnType> consumer = Consumers.newSingleConsumer();
#end
#if ( $method.hasParams() )
        PBParam param = PBParam.createParam(${method.builderParamString});
        Request<$returnType> packagedRequest = 
            Request.newParams(consumer, SYSTEM, "${method.name}", param, 
#else
        Request<$returnType> packagedRequest = 
            Request.newParams(consumer, SYSTEM, "${method.name}", 
#end
            ${returnType}.getDefaultInstance());
        connection.request(packagedRequest);
        return ${method.getReturnPbCode("consumer.get()")};
    }

    /**
#foreach( $line in $method.javadoc.split("\n"))
     * $line
#end
     *
     * @param consumer
     */
#if ( $method.isDeprecated() )
    @Deprecated
#end
    public Response ${method.name}(${method.paramString}#if ( $method.hasParams() ),#end Consumer<$returnType> consumer)${method.throwsClause} {
#if ( $method.hasParams() )
        PBParam param = PBParam.createParam(${method.builderParamString});
        Request<$returnType> packagedRequest = 
            Request.newParams(consumer, SYSTEM, "${method.name}", param, 
#else
        Request<$returnType> packagedRequest = 
            Request.newParams(consumer, SYSTEM, "${method.name}", 
#end
            ${returnType}.getDefaultInstance());
        return connection.request(packagedRequest);
    }
#end
#end
}