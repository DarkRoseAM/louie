/*** GENERATED FROM ${info.inputFile} - DO NOT EDIT  ***/

/*
 * ${className}.java
 */
package ${info.packageName};

import com.rhythm.louie.connection.Connectable;
import com.rhythm.louie.connection.LouieConnection;

public class ${className} implements ${info.serviceClassName}, Connectable {
    private final ${baseName}ServiceClient remoteClient;

    public ${className}() {
        this.remoteClient = new ${baseName}ServiceClient();
    }
    public ${className}(LouieConnection connection) {
        this.remoteClient = new ${baseName}ServiceClient(connection);
    }

    public ${baseName}Client getRemoteClient() {
        return remoteClient;
    }

    @Override
    public void setConnection(LouieConnection connection) {
        remoteClient.setConnection(connection);
    }
    
    @Override
    public LouieConnection getConnection() {
        return remoteClient.getConnection();
    }
#foreach($method in $info.methodInfos)

#if ($method.isDeprecated())
    @Deprecated
#end
    @Override
    public ${method.returnType} ${method.name}(${method.paramString})${method.throwsClause} {
#if ($method.isClientAccess()) 
        return this.remoteClient.${method.name}(${method.paramNameString});
#else
        throw new UnsupportedOperationException("This method is Internal and cannot be executed on a remote instance");
#end
    }
#end
}