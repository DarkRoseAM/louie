
#
# Auto generated by the LoUIE project
# PLEASE DO NOT EDIT, YOUR CHANGES WILL BE WIPED OUT AT A LATER STAGE!
#
# =============================================================================
# Module: ${package}.${serviceName}
# =============================================================================

"""Client for communicating with the LoUIE ${serviceName} service

Classes:
    ${baseName}Client
        Class for requesting ${serviceName}-related information from the LoUIE server
"""

# =============================================================================
# Imports
# =============================================================================

# Non-R&H imports
import os

# R&H imports
from louie.client import LouieHttpClient

LOUIE_HOST = os.environ.get('LOUIE_HOST', '${info.getHost()}')
SERVICE = '${serviceName}'

class ${baseName}Client(object):

    def __init__(self, host=LOUIE_HOST, port='8080', gateway='/${info.getGateway()}'):
        self.client = LouieHttpClient(host, port, gateway)
#foreach($method in $info.methodInfos)
#if ( !$method.isDeprecated() )

    def ${method.name}(self,#foreach($param in $method.getParameters()) ${param.getName()},#end decodeFunction=None):
        '''${method.getDescription()}'''
#foreach($import in $method.getImports())
        $import
#end
#foreach($param in $method.getParameters())
#if ( ${method.isLouieDataType($param.getPbType())} )
        if ( not isinstance( ${param.getName()}, ${param.getPbType()} ) ):
            ${param.getName()}Pb = ${param.getPbType()}()
#if ( ${method.getType($param.getPbType())} == "list" )
            ${param.getName()}Pb.${method.getPbArg($param.getPbType())}.extend(${param.getName()})
#else
            ${param.getName()}Pb.${method.getPbArg($param.getPbType())} = ${method.getType($param.getPbType())}(${param.getName()})
#end
            ${param.getName()} = ${param.getName()}Pb
#end
#end
        if decodeFunction is None:
            decodeFunction = ${method.getPbReturnType()}.FromString
        data = self.client.request(system=SERVICE,
                                   method='${method.name}',
                                   params=[${method.getParamNameString()}],
                                   decodeFunction=decodeFunction)
#if ( $method.returnsList() )
        return data
#else
        return data[0] if len(data) else None
#end
#end
#end
