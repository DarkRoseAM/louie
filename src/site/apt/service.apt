 ------
 Service
 ------

Defining a Service

 A LoUIE service is defined by simply tagging an interface with the @Service annotation. This flags the service for processing by the LoUIE annotation processor. Below is the example service generated by the LoUIE archetype.

+-------+
@Service
public interface SampleService {
    /**
     * An example service method which accepts a String  
     * and returns a SampleResponsePB
     *
     * @param request
     * @return SampleResponsePB
     * @throws Exception
     */
    SampleResponsePB basicRequest(String request) throws Exception;
}
+-------+

 When defining services keep in mind the following rules:

 * The names of parameters must not be reserved words in a programming language (mainly just java,c,python,perl). The LoUIE compiler has a list of reserved words that it will prevent you from using one accidentally. The reason for this is how clients will be autogenerated in various languages.

 * The arguments to a service method must be:
   * Protocol Buffer object (ie Message)
   * Standard java Object (String,Integer,Long,Float,Double,Date,Boolean)
   * List of a standard java datatype, ie List<String>
   * Lists of Protocol Buffers are not yet supported

 * The return type must be:
   * Protocol Buffer objects (ie Message)
   * Standard java datatype (String,Integer,Long,Float,Double,Date,Boolean)
   * List of a standard java datatype, ie List<String> 
   * List of a Protocul Buffer, ie List<SamplePB>

 * Javadoc is optional, but encouraged. The javadoc comments section will propagate to client apis in the various languages. Therefore the docs should be as language agnostic as possible.


Service Method Tags

 Need some descriptions here...

 * Grouping

 * Updating

 * Internal

 * Disabled

 * Streaming